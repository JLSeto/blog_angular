{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../helpers/services/helper.service\";\nimport * as i2 from \"@angular/flex-layout/flex\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nconst _c0 = [\"canvas\"];\n\nfunction FroggerComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.engine.resetCounter);\n  }\n}\n\nexport let FroggerComponent = /*#__PURE__*/(() => {\n  class FroggerComponent {\n    constructor(hS) {\n      this.hS = hS;\n      this.engine = null;\n    }\n\n    ngOnInit() {\n      this.engine = new Engine(this.canvas);\n    }\n\n  }\n\n  FroggerComponent.ɵfac = function FroggerComponent_Factory(t) {\n    return new (t || FroggerComponent)(i0.ɵɵdirectiveInject(i1.HelperService));\n  };\n\n  FroggerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FroggerComponent,\n    selectors: [[\"app-frogger\"]],\n    viewQuery: function FroggerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    decls: 19,\n    vars: 4,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutAlign\", \"start center\", 2, \"width\", \"100%\"], [\"canvas\", \"\"], [2, \"text-align\", \"right\"], [1, \"frogger-caption\", 3, \"click\"], [4, \"ngIf\"], [\"fxLayout\", \"row wrap\", \"fxLayoutAlign\", \"center center\", \"fxLayoutGap\", \"16px\"], [\"fxLayout\", \"column\", \"fxLayoutAlign\", \"start start\"], [\"mat-stroked-button\", \"\", 2, \"color\", \"#ff4048\", \"border-radius\", \"50px\", 3, \"click\"]],\n    template: function FroggerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"figure\");\n        i0.ɵɵelement(2, \"canvas\", null, 1);\n        i0.ɵɵelementStart(4, \"figcaption\", 2);\n        i0.ɵɵelementStart(5, \"span\", 3);\n        i0.ɵɵlistener(\"click\", function FroggerComponent_Template_span_click_5_listener() {\n          return ctx.hS.routerNavigateProject(\"frogger\");\n        });\n        i0.ɵɵtext(6, \"Frogger\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"h3\");\n        i0.ɵɵtext(8);\n        i0.ɵɵtemplate(9, FroggerComponent_span_9_Template, 2, 1, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"div\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵelementStart(17, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function FroggerComponent_Template_button_click_17_listener() {\n          return ctx.engine.player.changeCharacter();\n        });\n        i0.ɵɵtext(18, \"Change Character\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\"\", ctx.engine.gameMsg, \"\\u00A0\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.engine.resetCounter > 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Wins: \", ctx.engine.winCounter, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Losses: \", ctx.engine.loseCounter, \"\");\n      }\n    },\n    directives: [i2.DefaultLayoutDirective, i2.DefaultLayoutAlignDirective, i3.NgIf, i2.DefaultLayoutGapDirective, i4.MatButton],\n    styles: [\".frogger-caption[_ngcontent-%COMP%]{font-size:10px;cursor:pointer}.frogger-caption[_ngcontent-%COMP%]:hover{color:#64b5f6}\"]\n  }); // Engine\n\n  return FroggerComponent;\n})();\n\nclass Engine {\n  constructor(canvas) {\n    this.canvas = canvas; //Game Message 2 Way Binding\n\n    this.gameMsg = ''; //Resources\n\n    this.Resources = new Resources();\n    this.ctx = null; //Engine\n\n    this.lastTime = Date.now(); //App\n\n    this.allEnemies = [];\n    this.player = null;\n    this.keyItem = null;\n    this.gotKey = false;\n    this.resetCounter = -1;\n    this.winCounter = 0;\n    this.loseCounter = 0; //Key Location\n\n    this.keyColumn = Math.floor(Math.random() * (6 - 1) + 1); //Start Engine\n\n    this.main = () => {\n      let now = Date.now();\n      let dt = (now - this.lastTime) / 1000.0;\n      this.update(dt);\n      this.render();\n      this.lastTime = now;\n      window.requestAnimationFrame(this.main);\n    };\n\n    this.init = () => {\n      this.lastTime = Date.now();\n      this.main();\n    };\n\n    this.initializeResources();\n    this.initializeCanvas();\n    this.initializeApp();\n    this.addEventListeners(); //Start the game\n\n    this.Resources.onReady(this.init);\n  }\n\n  initializeResources() {\n    this.Resources.load(['/assets/frogger/char-boy.png', '/assets/frogger/enemy-bug.png', '/assets/frogger/Heart.png', '/assets/frogger/stone-block.png', '/assets/frogger/char-cat-girl.png', '/assets/frogger/Gem Blue.png', '/assets/frogger/Key.png', '/assets/frogger/water-block.png', '/assets/frogger/char-horn-girl.png', '/assets/frogger/Gem Green.png', '/assets/frogger/Rock.png', '/assets/frogger/char-pink-girl.png', '/assets/frogger/Gem Orange.png', '/assets/frogger/Selector.png', '/assets/frogger/char-princess-girl.png', '/assets/frogger/grass-block.png', '/assets/frogger/Star.png']);\n  }\n\n  initializeCanvas() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n    this.canvas.nativeElement.width = 505;\n    this.canvas.nativeElement.height = 606;\n  }\n\n  initializeApp() {\n    this.keyItem = new KeyItem(this.ctx, this.Resources, this.keyColumn);\n    this.player = new Player(this.ctx, this.Resources, this.keyItem);\n\n    for (let i = 0; i < 2; i++) {\n      this.allEnemies.push(new Enemy(this.ctx, this.Resources, this.player));\n    }\n  }\n\n  addEventListeners() {\n    document.addEventListener('keyup', e => {\n      this.player.handleInput(e.key);\n    });\n    window.addEventListener(\"keydown\", function (e) {\n      if ([\"Space\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1) {\n        e.preventDefault();\n      }\n    }, false);\n  }\n\n  update(dt) {\n    this.checkCollisions();\n    this.updateEntities(dt);\n  }\n\n  checkCollisions() {\n    if (this.gotKey) {\n      return;\n    }\n\n    if (this.player.x == this.keyItem.x && this.player.y == this.keyItem.y) {\n      this.resetCounter = 3;\n      this.gotKey = true;\n      this.gameMsg = 'You Win! Resetting in ';\n      this.player.disable = true;\n      this.keyItem.disable = true;\n      this.winCounter++;\n      var refreshInteval = setInterval(() => {\n        this.resetCounter--;\n\n        if (this.resetCounter <= 0) {\n          this.player.disable = false;\n          this.keyItem.disable = false;\n          this.gameMsg = '';\n          this.player.x = 202; //0 is first column. 101 is 2nd.\n\n          this.player.y = 374.5; //41.5 is middle of a row 41.5*9\n\n          this.gotKey = false;\n\n          for (let i = 0; i < 2; i++) {\n            this.allEnemies.push(new Enemy(this.ctx, this.Resources, this.player));\n          }\n\n          this.keyColumn = Math.floor(Math.random() * (6 - 1) + 1);\n          this.keyItem.x = (this.keyColumn - 1) * 101;\n          clearInterval(refreshInteval);\n        }\n      }, 1000);\n    }\n  }\n\n  updateEntities(dt) {\n    this.allEnemies.forEach(enemy => {\n      let x = enemy.update(dt);\n\n      if (x) {\n        this.loseCounter++;\n      }\n    });\n    this.player.update();\n  }\n\n  render() {\n    var _a;\n\n    let rowImages = ['/assets/frogger/water-block.png', '/assets/frogger/stone-block.png', '/assets/frogger/stone-block.png', '/assets/frogger/stone-block.png', '/assets/frogger/stone-block.png', '/assets/frogger/grass-block.png' // Row 2 of 2 of grass\n    ],\n        numRows = 6,\n        numCols = 5,\n        row,\n        col;\n    (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.clearRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n\n    for (row = 0; row < numRows; row++) {\n      for (col = 0; col < numCols; col++) {\n        if (row == 0 && col == this.keyColumn - 1) {\n          this.ctx.drawImage(this.Resources.get('/assets/frogger/stone-block.png'), col * 101, row * 83);\n        } else {\n          this.ctx.drawImage(this.Resources.get(rowImages[row]), col * 101, row * 83);\n        }\n      }\n    }\n\n    this.renderEntities();\n  }\n\n  renderEntities() {\n    this.allEnemies.forEach(function (enemy) {\n      enemy.render();\n    });\n    this.player.render();\n    this.keyItem.render();\n  }\n\n} // Resources\n\n\nclass Resources {\n  constructor() {\n    //Resources\n    this.resourceCache = {};\n    this.loading = [];\n    this.readyCallbacks = [];\n  }\n\n  load(urlOrArr) {\n    if (urlOrArr instanceof Array) {\n      urlOrArr.forEach(url => {\n        this._load(url);\n      });\n    } else {\n      this._load(urlOrArr);\n    }\n  }\n\n  _load(url) {\n    if (this.resourceCache[url]) {\n      return this.resourceCache[url];\n    } else {\n      let img = new Image();\n\n      img.onload = () => {\n        this.resourceCache[url] = img;\n\n        if (this.isReady()) {\n          this.readyCallbacks.forEach(function (func) {\n            func();\n          });\n        }\n      };\n\n      this.resourceCache[url] = false;\n      img.src = url;\n    }\n  }\n\n  get(url) {\n    return this.resourceCache[url];\n  }\n\n  isReady() {\n    let ready = true;\n\n    for (var k in this.resourceCache) {\n      if (this.resourceCache.hasOwnProperty(k) && !this.resourceCache[k]) {\n        ready = false;\n      }\n    }\n\n    return ready;\n  }\n\n  onReady(func) {\n    this.readyCallbacks.push(func);\n  }\n\n} //App\n\n\nclass Player {\n  constructor(ctx, resources, keyItem) {\n    this.ctx = ctx;\n    this.resources = resources;\n    this.keyItem = keyItem;\n    this.sprite = '/assets/frogger/char-boy.png';\n    this.charIdx = 0;\n    this.x = 202;\n    this.y = 374.5;\n    this.disable = false;\n\n    this.update = () => {\n      if (this.disable) {\n        return;\n      }\n\n      if (this.x > 404 || this.x < 0 || this.y > 415 || this.y < 0) {\n        this.x = 202;\n        this.y = 374.5;\n      }\n    };\n\n    this.handleInput = keys => {\n      if (this.disable) {\n        return;\n      }\n\n      switch (keys) {\n        case 'ArrowUp':\n          this.y -= 83;\n          break;\n\n        case 'ArrowDown':\n          this.y += 83;\n          break;\n\n        case 'ArrowLeft':\n          this.x -= 101;\n          break;\n\n        case 'ArrowRight':\n          this.x += 101;\n          break;\n      }\n    };\n\n    this.render = () => {\n      var _a, _b;\n\n      (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.drawImage(this.resources.get(this.sprite), this.x, this.y);\n      (_b = this.ctx) === null || _b === void 0 ? void 0 : _b.save();\n    };\n\n    this.arrChar = ['/assets/frogger/char-boy.png', '/assets/frogger/char-cat-girl.png', '/assets/frogger/char-horn-girl.png', '/assets/frogger/char-pink-girl.png', '/assets/frogger/char-princess-girl.png'];\n  }\n\n  changeCharacter() {\n    this.charIdx = this.charIdx >= this.arrChar.length - 1 ? 0 : this.charIdx + 1;\n    this.sprite = this.arrChar[this.charIdx];\n  }\n\n}\n\nclass Enemy {\n  constructor(ctx, resources, player) {\n    this.ctx = ctx;\n    this.resources = resources;\n    this.player = player;\n    this.sprite = '/assets/frogger/enemy-bug.png';\n    this.x = -101;\n    this.y = 0;\n    this.speed = Math.floor(Math.random() * 400);\n\n    this.randomEnemies = function () {\n      var set = [42.5, 125.5, 208.5, 291.5];\n      var rndm = Math.floor(Math.random() * 4);\n      return set[rndm];\n    };\n\n    this.update = dt => {\n      this.x += this.speed * dt;\n      this.x = this.x > 505 ? -101 : this.x + 1;\n      let minRange = Math.floor(this.x - 50);\n      let maxRange = Math.floor(this.x + 50);\n\n      if (this.y == this.player.y) {\n        if (this.player.x > minRange && this.player.x < this.x || this.player.x > this.x && this.player.x < maxRange) {\n          this.player.x = 202; //0 is first column. 101 is 2nd.\n\n          this.player.y = 374.5; //41.5 is middle of a row 41.5*9\n\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.render = () => {\n      var _a, _b;\n\n      (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.drawImage(this.resources.get(this.sprite), this.x, this.y);\n      (_b = this.ctx) === null || _b === void 0 ? void 0 : _b.save();\n    };\n\n    this.y = this.randomEnemies();\n  }\n\n}\n\nclass KeyItem {\n  constructor(ctx, resources, keyColumn) {\n    this.ctx = ctx;\n    this.resources = resources;\n    this.keyColumn = keyColumn;\n    this.disable = false;\n    this.sprite = '/assets/frogger/Key.png';\n    this.x = 404;\n    this.y = -40.5;\n\n    this.render = () => {\n      var _a, _b;\n\n      if (this.disable) {\n        return;\n      } else {\n        (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.drawImage(this.resources.get(this.sprite), this.x, this.y);\n        (_b = this.ctx) === null || _b === void 0 ? void 0 : _b.save();\n      }\n    };\n\n    this.x = 101 * (keyColumn - 1);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}