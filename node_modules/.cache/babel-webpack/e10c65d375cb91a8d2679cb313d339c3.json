{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../helpers/services/helper.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/flex-layout/extended\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"../frogger/frogger.component\";\nimport * as i10 from \"./iframe-view\";\nimport * as i11 from \"../helpers/pipes/displayDate.pipe\";\n\nfunction ProjectsComponent_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ProjectsComponent_div_3_div_2_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const fb_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.setFilter(fb_r7);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const fb_r7 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r5.selectedFB == fb_r7 ? \"#ffffff\" : \"#ff4081\")(\"background-color\", ctx_r5.selectedFB == fb_r7 ? \"#ff4081\" : \"#ffffff\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fb_r7, \" \");\n  }\n}\n\nfunction ProjectsComponent_div_3_div_3_mat_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\", 14);\n    i0.ɵɵlistener(\"click\", function ProjectsComponent_div_3_div_3_mat_card_1_Template_mat_card_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const obj_r10 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.hS.routerNavigateProject(obj_r10.link);\n    });\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵelementStart(2, \"div\", 16);\n    i0.ɵɵelement(3, \"img\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 18);\n    i0.ɵɵelementStart(5, \"div\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 20);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"displayDate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 20);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 21);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r10 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", obj_r10.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(obj_r10.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 5, obj_r10.date));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"(\", obj_r10.subtitle, \")\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(obj_r10.description);\n  }\n}\n\nfunction ProjectsComponent_div_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, ProjectsComponent_div_3_div_3_mat_card_1_Template, 14, 7, \"mat-card\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r10 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.checkFilter(obj_r10));\n  }\n}\n\nfunction ProjectsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵtemplate(2, ProjectsComponent_div_3_div_2_Template, 3, 5, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ProjectsComponent_div_3_div_3_Template, 2, 1, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.filterButtons);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.arrProjects);\n  }\n}\n\nfunction ProjectsComponent_div_5_div_1_div_3_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const detail_r20 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", detail_r20.img, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction ProjectsComponent_div_5_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 24);\n    i0.ɵɵelementStart(4, \"div\", 27);\n    i0.ɵɵelement(5, \"span\", 4);\n    i0.ɵɵtemplate(6, ProjectsComponent_div_5_div_1_div_3_div_6_Template, 2, 1, \"div\", 28);\n    i0.ɵɵelement(7, \"span\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const detail_r20 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(detail_r20.heading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", detail_r20.notes, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", detail_r20.img);\n  }\n}\n\nfunction ProjectsComponent_div_5_div_1_app_frogger_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-frogger\", 29);\n  }\n}\n\nfunction ProjectsComponent_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h1\", 23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ProjectsComponent_div_5_div_1_div_3_Template, 8, 3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelementStart(5, \"h2\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"div\", 24);\n    i0.ɵɵelementStart(8, \"div\", 25);\n    i0.ɵɵtemplate(9, ProjectsComponent_div_5_div_1_app_frogger_9_Template, 1, 0, \"app-frogger\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r16 = i0.ɵɵnextContext().$implicit;\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(obj_r16.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", obj_r16.details);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(obj_r16 == null ? null : obj_r16.demo == null ? null : obj_r16.demo.heading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", obj_r16.demo == null ? null : obj_r16.demo.notes, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", obj_r16.link == \"frogger\" && !ctx_r17.hS.getIsMobile());\n  }\n}\n\nfunction ProjectsComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ProjectsComponent_div_5_div_1_Template, 10, 5, \"div\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r16 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.checkCurrentURL(obj_r16));\n  }\n}\n\nfunction ProjectsComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelement(1, \"app-iframesrc\", 31);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"iframeSrc\", ctx_r2.iframeSrc);\n  }\n}\n\nfunction ProjectsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelementStart(1, \"button\", 33);\n    i0.ɵɵelementStart(2, \"a\", 34);\n    i0.ɵɵtext(3, \"View Source Code on GitHub\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"href\", ctx_r3.gitSrc, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const hw_r31 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(hw_r31);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"Hardware\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 35);\n    i0.ɵɵtemplate(4, ProjectsComponent_div_9_div_1_div_1_div_4_Template, 3, 1, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r25 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", obj_r25.hardware);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 36);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const sw_r34 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(sw_r34);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"Software\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 35);\n    i0.ɵɵtemplate(4, ProjectsComponent_div_9_div_1_div_2_div_4_Template, 3, 1, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r25 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", obj_r25.software);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_3_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 33);\n    i0.ɵɵelementStart(2, \"a\", 34);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rf_r37 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"href\", rf_r37.link, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(rf_r37.title);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"References\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 35);\n    i0.ɵɵtemplate(4, ProjectsComponent_div_9_div_1_div_3_div_4_Template, 4, 2, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r25 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", obj_r25.references);\n  }\n}\n\nfunction ProjectsComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ProjectsComponent_div_9_div_1_div_1_Template, 5, 1, \"div\", 22);\n    i0.ɵɵtemplate(2, ProjectsComponent_div_9_div_1_div_2_Template, 5, 1, \"div\", 22);\n    i0.ɵɵtemplate(3, ProjectsComponent_div_9_div_1_div_3_Template, 5, 1, \"div\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r25 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", obj_r25.hardware.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", obj_r25.software.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", obj_r25.references.length > 0);\n  }\n}\n\nfunction ProjectsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ProjectsComponent_div_9_div_1_Template, 4, 3, \"div\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const obj_r25 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.checkCurrentURL(obj_r25));\n  }\n}\n\nexport let ProjectsComponent = /*#__PURE__*/(() => {\n  class ProjectsComponent {\n    constructor(hS, route, router, cfr, dom) {\n      this.hS = hS;\n      this.route = route;\n      this.router = router;\n      this.cfr = cfr;\n      this.dom = dom;\n      this.filterButtons = ['All', 'Hardware', 'Web Components'];\n      this.selectedFB = this.filterButtons[0];\n      this.currentURL = '';\n      this._routerSub = Subscription.EMPTY; //Check when the navigation ends, and then get profile info to prevent multiple requests\n\n      this.currentRoute = this.route.snapshot.paramMap.get('title');\n      this.arrProjects = [{\n        type: [\"Web Components\"],\n        image: \"/assets/frogger/froggerScreen.png\",\n        title: \"Frogger\",\n        date: new Date(\"August 08, 2021\"),\n        subtitle: \"TypeScript, JavaScript, HTML, CSS\",\n        description: \"A Frogger game from Udacity's Nanodegree Web Development. The project was initially in JavaScript but ported over to TypeScript!\",\n        link: \"frogger\",\n        details: [{\n          heading: 'Overview',\n          notes: `This frogger game is based off of Udacity's frontend nanodegree arcade game.\n                                                        I initially did the project  in JavaScript but ported it over to \n                                                        TypeScript so that it could be integrated with this website (which is based off Angular). The objective of the game is to \n                                                        reach the key without getting hit by\n                                                        the moving bugs.  If you get hit by a bug, you will start back in your initial position.  If you\n                                                        reach the key, the level will be regenerated but now with more bugs!`\n        }, {\n          heading: 'How it Works',\n          notes: `The game consists of three layers: the engine, the resources, and the application.\n                                                        The engine works by drawing the entire game screen over and over again.  \n                                                        The resources is an image loading utility which eases the process of loading images\n                                                        to be used within the game.  The app layer consists of the player, the enemies, and the key. \n                                                        It initializes the location of our objects on the game field and handles the event listeners\n                                                        like when we press a key.`\n        }],\n        demo: {\n          heading: 'Demo',\n          video: '',\n          git: 'https://github.com/JLSeto/JLSeto.github.io/tree/master/src/app/frogger'\n        },\n        hardware: [],\n        software: ['TypeScript', 'JavaScript', 'Html', 'CSS'],\n        references: [{\n          link: 'https://docs.google.com/document/d/1v01aScPjSWCCWQLIpFqvg3-vXLH2e8_SZQKC8jNO0Dc/pub?embedded=true',\n          title: 'Project Guide'\n        }, {\n          link: 'https://review.udacity.com/#!/projects/2696458597/rubric',\n          title: 'Rubric'\n        }]\n      }, {\n        type: [\"Web Components\"],\n        image: \"/assets/voiceGengo/voiceGengo.png\",\n        title: \"Voice Gengo\",\n        date: new Date(\"March 08, 2021\"),\n        subtitle: \"Full Stack Web Development, FrontEnd, BackEnd, OWASP, Localization, Stripe API, Web Sockets\",\n        description: \"A community voice app for Japanese and English aimed to help improve pronunciation\",\n        link: \"voiceGengo\",\n        details: [{\n          heading: 'Overview',\n          notes: `Voice Gengo is a full stack web development project I did with the aim\n                                                        of helping people speak a language better.  The app currently supports 2 languages:\n                                                        English and Japanese.  In the app you can create posts, write notebooks,\n                                                        and record yourself speaking the language you are learning.  You are also able to \n                                                        share your posts, notes, or recordings with Native Speakers of the language.  \n                                                        While all of these features are free to use, I did include paid\n                                                        features such as scheduling lessons with a tutor and getting voice recordings \n                                                        or notebook entries corrected.  Unfortunately, the website was not a hit (possibly I had a very niche field\n                                                        or maybe I did not market it well enough).  However, going through the entire \n                                                        process of building out the entire frontend and backend while following OWASP security practices\n                                                        and deploying it on Google Cloud Compute was a great learning experience.  The site is currently online \n                                                        and is available at \n                                                        <a href=\"https://voicegengo.com\">VoiceGengo.com</a>`,\n          img: '/assets/voiceGengo/voiceGengoScreen.png'\n        }, {\n          heading: 'About',\n          notes: `<a href=\"https://voicegengo.com/about\">VoiceGengo.com/about</a>`\n        }],\n        demo: {\n          heading: '',\n          video: '',\n          git: ''\n        },\n        hardware: [],\n        software: ['TypeScript', 'MongoDB', 'Express', 'Angular', 'Node.js', 'Stripe API', 'Socket.io', 'Google Analytics'],\n        references: [{\n          link: 'https://cheatsheetseries.owasp.org/',\n          title: 'OWASP Cheat Sheet'\n        }, {\n          link: 'https://stripe.com/',\n          title: 'Stripe'\n        }, {\n          link: 'https://socket.io/',\n          title: 'Socket Io'\n        }]\n      }, {\n        type: [\"Hardware\"],\n        image: \"/assets/microController/arduino101/arduino101.jpg\",\n        title: \"IoT MEAN App (RESTful API server and Arduino101)\",\n        date: new Date(\"December 12, 2017\"),\n        subtitle: \"Bluetooth Low Energy, Arduino, Sensor Collection\",\n        description: \"An IoT web application built using restful API that displays data collected from Arduino 101\",\n        link: \"IoT-Arduino101\",\n        details: [{\n          heading: 'Overview',\n          notes: `The Arduino101 is a microcontroller board that is based off of the Intel Curie Module which includes \n                                            the Intel Quark Microcontroller C1000. This board comes with a 6-axis accelerometer/gyrometer and also \n                                            has built in Bluetooth low Energy (BLE). For this project, the Arduino101 is set up to collect acceleration \n                                            and gyrometer data, and then advertise the data over BLE. A client device is setup to connect to the Arduino101 \n                                            via bluetooth, read the advertised data, and then send that data over wifi to a server. \n                                            The server stores the received data in a database and also forwards it to a webpage where \n                                            the data is graphed and displayed for the user. From the webpage, a user can also control \n                                            the Arduino101’s sampling frequency. With a click of a button, the user can send a new sampling time all \n                                            the way back to the Arduino101. The change is instantaneous and can be visually seen on the webpage. \n                                            The below diagram illustrates a general overview of this project. <br>\n                                            <a href=\"https://jlseto.github.io\">jlseto.github.io</a>`,\n          img: '/assets/microController/arduino101/arduino101_diagram_db.png'\n        }, {\n          heading: 'How it Works',\n          notes: `<div class=\"h3-deep\">Arduino101</div>\n                                            Standard Arduino code along with the “CurieBLE” and “CurieIMU” libraries were used to write the code for \n                                            the Arduino101 board. The board is set up as a peripheral with one service that contains seven characteristics. \n                                            One characteristic is the sampling frequency (ts) which the user can write values to, and the other six are the \n                                            acceleration/gyrometer values (ax, ay, az, gx, gy, gz). These service and characteristics are each assigned a UUID \n                                            which is used by the client device to connect, subscribe, read, write, or receive notifications for a particular characteristic.\n                                            <div class=\"h3-deep\">Client Device</div>\n                                            On my client device, Node.js along with Noble is used to search and connect to the Arduino101 over BLE. \n                                            Once the client device finds the Arduino101, it looks under the assigned Service UUID for each Characteristic UUID. \n                                            Notifications are then turned on for each characteristic, and Socket.io is used to forward the sampling frequency and \n                                            accelerometer/gyrometer data to my server. One interesting point to note here is the use of Socket.io over WebSockets. \n                                            The main reason why Socket.io is used over Websockets in this project is because of multiplexing. Socket.io’s API makes \n                                            it quite easy to send multiple signals over one channel while doing this with Websockets is a little more complex.\n                                            <div class=\"h3-deep\">Server / Webpage</div>\n                                            Node.js along with Express is used to set up my server and MongoDB is used as my database. Socket.io once again forwards \n                                            the data from my server to my webpage, where the raw data values are displayed and graphed for the user. From the webpage, \n                                            the user can also choose to change the sampling frequency of the Arduino101. These effects take place nearly instantaneously \n                                            thanks to Socket.io and Noble. The user can also see this change visually on the webpage where the rate of the incoming data \n                                            will either speed up or slow down based on the new sampling time chosen. The webpage was created using frameworks such as Bootstrap \n                                            and Angularjs. Google Charts is used to graph the acceleration values in real time. The project is available on github and a demo \n                                            is available on youtube.`\n        }],\n        demo: {\n          heading: 'Demo',\n          video: 'https://www.youtube.com/embed/x961tXPIoRY',\n          git: 'https://github.com/JLSeto/Arduino101'\n        },\n        hardware: ['Arduino101', 'Laptop (Ubuntu OS)', 'Intel Edison or Raspberry Pie'],\n        software: ['Node.js', 'Socket.io', 'Noble', 'Express', 'Angularjs', 'BootStrap', 'Google Charts', 'HTML', 'CSS', 'JavaScript'],\n        references: [{\n          link: 'https://www.arduino.cc/en/Reference/CurieBLE',\n          title: 'CurieBLE'\n        }, {\n          link: 'https://www.rabbitmq.com/blog/2012/02/23/how-to-compose-apps-using-websockets/',\n          title: 'Multiplexing using Websockets'\n        }, {\n          link: 'https://www.npmjs.com/package/node-red-contrib-scx-ibmiotapp',\n          title: 'Google Charts'\n        }]\n      }, {\n        type: [\"Hardware\"],\n        image: \"/assets/microController/cc2650/cc2650.jpg\",\n        title: \"IoT-CC2650\",\n        date: new Date(\"December 5, 2017\"),\n        subtitle: \"IoT with Texas Instrument CC2650 SensorTag\",\n        description: \"An IoT web application built using restful API that displays data collected from Texas Instrument CC2650 SensorTag\",\n        link: \"IoT-CC2650\",\n        details: [{\n          heading: 'Overview',\n          notes: `Texas Instrument’s CC2650 SensorTag is a sensor that captures real world data such as acceleration and \n                                                        temperature and allows for quick IoT programming. The SensorTag is easily configured to connect over bluetooth \n                                                        to your phone via a downloadable TI SensorTag App. The app displays the captured data freely to the user, and also \n                                                        allows you to forward that data to IBM’s Quick start server via wifi with a switch of a button. IBM’s platform can \n                                                        then be used to analyze the data as well as write and host our IoT application. However, in this project, Node-Red and \n                                                        Websockets are used to pull the data from IBM’s website and display it in our own website. \n                                                        The below digram shows and an overall view of this demo and the part this project is focused on.`,\n          img: \"/assets/microController/cc2650/cc2650_diagram.png\"\n        }, {\n          heading: 'How it Works',\n          notes: `Node.js is used as my server and integrates Node-Red - a programming tool \n                                                        with a graphical interface that allows you to just connect programming objects like a \n                                                        flow diagram. To retrieve data from IBM’s platform in Node-red, I mainly use then ibmiotapp module, \n                                                        and then connect that to my websocket module which sends the data to my server. The server \n                                                        then forwards that data via websockets to my website where the raw values are displayed using some simple \n                                                        javascript, css, and html. Google Charts is also used in my website to graph the x, y, and z acceleration data \n                                                        in real time. This project is available on github and a demo is available on youtube.`,\n          img: \"/assets/microController/cc2650/middleware.png\"\n        }],\n        demo: {\n          heading: 'Demo',\n          video: 'https://www.youtube.com/embed/2XyzMGU4GSo',\n          git: 'https://github.com/JLSeto/CC2650'\n        },\n        hardware: ['Texas Instruments CC2650 SensorTag', 'SmartPhone with “TI SensorTag” Application', 'Laptop running Linux (Ubuntu OS)'],\n        software: ['Node.js', 'Node-Red', 'BootStrap', 'HTML', 'CSS', 'JavaScript'],\n        references: [{\n          link: 'http://www.ti.com/tool/CC2650STK',\n          title: 'Texas Instrument’s CC2650 SensorTag'\n        }, {\n          link: 'https://nodered.org/',\n          title: 'Node-Red'\n        }, {\n          link: 'https://github.com/websockets/ws',\n          title: 'WebSockets'\n        }, {\n          link: 'https://www.npmjs.com/package/node-red-contrib-scx-ibmiotapp',\n          title: 'ibmiotapp'\n        }, {\n          link: 'https://www.npmjs.com/package/node-red-contrib-scx-ibmiotapp',\n          title: 'Google Charts'\n        }]\n      }, {\n        type: [\"Web Components\"],\n        image: \"/assets/jekyll/jekyll.png\",\n        title: \"Static Website with Jekyll\",\n        date: new Date(\"November 11, 2017\"),\n        subtitle: \"Website built using Jekyll and Bootstrap\",\n        description: \"A static website built using Jekyll hosting old projects\",\n        link: \"static-jekyll\",\n        details: [{\n          heading: 'Overview',\n          notes: `This website was created using Jekyll and is hosted on github. \n                                                        Jekyll is a static website generator, and allows you to quickly create a blog \n                                                        with some html and css. There are a lot of tutorials and examples \n                                                        online on how to get set-up and started. For my website, \n                                                        I use Bootstrap as a frontend framework which makes the \n                                                        site quite compatible with mobile devices. Bootstrap also has \n                                                        nice features such as navigation bars and jumbotrons. Font Awesome is used \n                                                        for the social icons in the navigation bar, and SASS is \n                                                        used to organize some of my custom CSS files.\n                                                        To create the Japanese version of this site, I create a \n                                                        duplicate entry for each corresponding English page and assign \n                                                        each corresponding entry a reference id. A small script is then written in Jekyll’s Liquid to sort the pages, and deliver the corresponding translation page to the one currently loaded. This feature can be accessed from the Navigation bar. The source code for my website is available on my github.`,\n          img: \"/assets/jekyll/jekyll.png\"\n        }],\n        hardware: [],\n        software: ['Html', 'CSS', 'JavaScript', 'BootStrap', 'Github Pages'],\n        references: [{\n          link: 'https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/',\n          title: 'Setting up your GitHub Pages site locally with Jekyll '\n        }, {\n          link: 'http://jmcglone.com/guides/github-pages/',\n          title: 'Creating and Hosting a Personal Site on GitHub'\n        }, {\n          link: 'https://www.sylvaindurand.org/making-jekyll-multilingual/',\n          title: 'Making Jekyll multilingual '\n        }]\n      }];\n      this._routerSub = router.events.subscribe(val => {\n        if (val instanceof NavigationEnd) {\n          this.setiFrame(val.url);\n          this.reInitialize(val.url);\n        }\n      });\n    }\n\n    ngOnInit() {}\n\n    reInitialize(url) {\n      url = url.split(\"/\")[2];\n      this.currentURL = url;\n    }\n\n    checkCurrentURL(obj) {\n      return obj.link == this.currentURL ? true : false;\n    }\n\n    setiFrame(url) {\n      var _a, _b;\n\n      url = url.split(\"/\")[2];\n\n      for (let obj of this.arrProjects) {\n        if (obj.link == url) {\n          let isValid = obj.link == url ? true : false;\n\n          if (isValid) {\n            this.gitSrc = (_a = obj.demo) === null || _a === void 0 ? void 0 : _a.git;\n            this.iframeSrc = (_b = obj.demo) === null || _b === void 0 ? void 0 : _b.video;\n          }\n        }\n      }\n    }\n\n    checkFilter(obj) {\n      return this.selectedFB == 'All' || obj.type.includes(this.selectedFB) ? true : false;\n    }\n\n    setFilter(str) {\n      this.selectedFB = str;\n    }\n\n    ngOnDestroy() {\n      if (!!this._routerSub) {\n        this._routerSub.unsubscribe();\n      }\n    }\n\n  }\n\n  ProjectsComponent.ɵfac = function ProjectsComponent_Factory(t) {\n    return new (t || ProjectsComponent)(i0.ɵɵdirectiveInject(i1.HelperService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i3.DomSanitizer));\n  };\n\n  ProjectsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectsComponent,\n    selectors: [[\"app-projects\"]],\n    decls: 11,\n    vars: 6,\n    consts: [[\"fxLayout.gt-sm\", \"row\", \"fxLayoutAlign.gt-sm\", \"start start\", \"fxLayout.lt-md\", \"column\", \"fxLayoutAlign.lt-md\", \"start start\", 1, \"ftop-container\", 3, \"ngClass\"], [\"fxShow\", \"true\", \"fxHide.lt-lg\", \"\", \"fxFlex\", \"4\"], [\"fxFlex\", \"\", \"fxLayout\", \"row\", \"fxLayoutAlign\", \"start start\", \"fxLayout.lt-md\", \"column\", \"fxLayoutAlign.lt-md\", \"start stretch\", \"fxLayoutGap\", \"30px\", 2, \"padding-left\", \"10px\", \"padding-right\", \"10px\"], [\"fxFlex\", \"\", 4, \"ngIf\"], [\"fxFlex\", \"\"], [4, \"ngFor\", \"ngForOf\"], [2, \"text-align\", \"center\", \"margin-bottom\", \"8px\"], [\"style\", \"margin-bottom: 4px\", 4, \"ngIf\"], [\"style\", \"text-align: right;\", 4, \"ngIf\"], [\"fxLayout\", \"row wrap\", \"fxLayoutAlign\", \"start stretch\", \"fxLayoutGap\", \"4px\"], [\"style\", \"margin-bottom: 8px;\", 4, \"ngFor\", \"ngForOf\"], [\"mat-stroked-button\", \"\", 1, \"projects-button-pink\", 3, \"click\"], [2, \"margin-bottom\", \"8px\"], [\"class\", \"mat-elevation-z0 projects-card\", \"style\", \"border: 0.5px solid #d5d5d5;\", 3, \"click\", 4, \"ngIf\"], [1, \"mat-elevation-z0\", \"projects-card\", 2, \"border\", \"0.5px solid #d5d5d5\", 3, \"click\"], [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"start stretch\", \"fxLayoutGap\", \"5px\", \"fxLayout.lt-sm\", \"column\", \"fxLayoutAlign.lt-sm\", \"stretch center\"], [2, \"display\", \"block\", \"max-width\", \"250px\", \"min-width\", \"50px\"], [1, \"projects-img\", 3, \"src\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\", \"fxLayoutAlign\", \"start start\", 2, \"padding-left\", \"4px\"], [1, \"projects-title\"], [1, \"projects-subtitle\"], [1, \"projects-description\"], [4, \"ngIf\"], [2, \"text-align\", \"center\"], [2, \"margin-bottom\", \"12px\", \"line-height\", \"1.6\", 3, \"innerHTML\"], [2, \"display\", \"block\", \"max-width\", \"800px\", \"min-width\", \"50px\"], [\"class\", \"projects-img\", 4, \"ngIf\"], [\"fxLayout\", \"row\", 2, \"margin-bottom\", \"12px\"], [\"style\", \"display: block; max-width: 800px; min-width: 50px;\", 4, \"ngIf\"], [1, \"projects-img\"], [2, \"margin-bottom\", \"4px\"], [3, \"iframeSrc\"], [2, \"text-align\", \"right\"], [\"mat-stroked-button\", \"\", 2, \"border-radius\", \"50px\", \"background-color\", \"white\", \"margin-bottom\", \"8px\"], [\"target\", \"_blank\", 2, \"color\", \"#1e88e5\", \"text-decoration\", \"none\", 3, \"href\"], [\"fxLayout\", \"row wrap\", \"fxLayoutGap\", \"4px\", 2, \"margin-bottom\", \"12px\"], [\"mat-stroked-button\", \"\", 1, \"projects-button-no-link\"]],\n    template: function ProjectsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, ProjectsComponent_div_3_Template, 4, 2, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtemplate(5, ProjectsComponent_div_5_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵtemplate(7, ProjectsComponent_div_7_Template, 2, 1, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, ProjectsComponent_div_8_Template, 4, 1, \"div\", 8);\n        i0.ɵɵtemplate(9, ProjectsComponent_div_9_Template, 2, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.hS.getInnerWidth() > 959 ? \"toptop\" : \"toptopPadd\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hS.getIsMobile() && ctx.hS.getInnerWidth() > 959 || !ctx.currentURL || ctx.hS.getIsMobile() && !ctx.currentURL);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.arrProjects);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.iframeSrc);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gitSrc);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.arrProjects);\n      }\n    },\n    directives: [i4.DefaultLayoutDirective, i4.DefaultLayoutAlignDirective, i5.NgClass, i6.DefaultClassDirective, i6.DefaultShowHideDirective, i4.DefaultFlexDirective, i4.DefaultLayoutGapDirective, i5.NgIf, i5.NgForOf, i7.MatButton, i8.MatCard, i9.FroggerComponent, i10.iFrameView],\n    pipes: [i11.DisplayDatePipe],\n    styles: [\".ftop-container[_ngcontent-%COMP%]{font-size:120%;font-family:system-ui,-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Ubuntu,\\\"Helvetica Neue\\\",sans-serif;color:#333;letter-spacing:1px}.toptop[_ngcontent-%COMP%]{background:linear-gradient(to right,white 50%,#FAFAFA 0%);min-height:calc(100vh - 40px);margin-bottom:10px;padding-top:25px}.toptopPadd[_ngcontent-%COMP%]{padding-top:25px}h1[_ngcontent-%COMP%]{font-family:\\\"Varela Round\\\";font-size:24px;font-style:normal;font-feature-settings:normal;font-variant:normal;font-weight:550;line-height:69.4px}h2[_ngcontent-%COMP%]{font-family:\\\"Varela Round\\\";font-size:20px;font-style:normal;font-feature-settings:normal;font-variant:normal;font-weight:500;line-height:36.4px}[_nghost-%COMP%]     .h3-deep{font-family:\\\"Varela Round\\\";font-size:16px;font-style:normal;font-feature-settings:normal;font-variant:normal;font-weight:600;margin-top:12px;margin-bottom:4px}.projects-card[_ngcontent-%COMP%]{cursor:pointer}.projects-card[_ngcontent-%COMP%]:hover{background-color:#e8f0ff}.projects-title[_ngcontent-%COMP%]{font-family:\\\"Varela Round\\\";font-size:16.5px;font-style:normal;font-feature-settings:normal;font-variant:normal;font-weight:500;line-height:28.4px}.projects-subtitle[_ngcontent-%COMP%]{font-family:\\\"Varela Round\\\";font-size:14px;font-style:italic;font-feature-settings:normal;font-variant:normal;font-weight:400;color:#646464}.projects-description[_ngcontent-%COMP%]{font-family:\\\"Varela Round\\\";font-size:14px;font-style:normal;font-feature-settings:normal;font-variant:normal;font-weight:400}.projects-img[_ngcontent-%COMP%]{border-radius:5px;height:auto;width:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;padding-left:0;display:block}.videoWrapper[_ngcontent-%COMP%]{position:relative;padding-bottom:56.25%;padding-top:25px;height:0;width:100%;height:100%;border:.5px solid #d5d5d5}.videoWrapper[_ngcontent-%COMP%]   iframe[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%}.projects-button-no-link[_ngcontent-%COMP%]{border-radius:50px;color:#505050;background-color:#fff;cursor:default;pointer-events:none;margin-bottom:8px;text-overflow:ellipsis}.projects-button-pink[_ngcontent-%COMP%]{border-radius:50px;color:#ff4048;background-color:#fff;margin-bottom:8px;text-overflow:ellipsis}\"]\n  });\n  return ProjectsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}